[tool.poetry]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.description}}"
authors = ["IFCO Digital"]
packages = [
  { include = "frontend", from = "src" },
  { include = "backend", from = "src" },
]

[tool.poe.tasks]
"run" = "python -m streamlit run src/frontend/app.py"
"init" = "sh -c 'pre-commit install && pre-commit run --all-files'"
test = "python -m unittest discover tests"
"test:unit" = "poe test tests/"
"test:coverage" = "sh -c 'poe coverage:erase && poe coverage:run ; poe coverage:combine ; poe coverage:report'"
"test:coverage:html" = "sh -c 'poe coverage:erase && poe coverage:run ; poe coverage:combine ; poe coverage:report ; poe coverage:report:html'"
# Internal poe tasks
"coverage:erase" = "coverage erase"
"coverage:run" = "coverage run -m unittest discover"
"coverage:combine" = "coverage combine"
"coverage:report" = "coverage report -m"
"coverage:report:html" = "coverage html"

[tool.poetry.dependencies]
python = "^3.12"
streamlit = "^1.41"

[tool.poetry.group.dev.dependencies]
coverage = "7.1.0"
black = "^23.3.0"
poethepoet = "0.18.0"
pre-commit = "^3.3.3"
pytest = "^8.3.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
skip-magic-trailing-comma = true

[tool.isort]
profile = "black"
line_length = 100

[tool.flake8]
max-complexity = 10
max-line-length = 100

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
show_missing = true

[tool.bandit.assert_used]
skips = ['*test_*.py']
